//  -------------------------------------------------------------------------
//  Copyright (C) 2015 BMW Car IT GmbH
//  -------------------------------------------------------------------------
//  This Source Code Form is subject to the terms of the Mozilla Public
//  License, v. 2.0. If a copy of the MPL was not distributed with this
//  file, You can obtain one at https://mozilla.org/MPL/2.0/.
//  -------------------------------------------------------------------------

/**
@mainpage RAMSES Embedded Compositing

## Introduction

From [Wikipedia](https://en.wikipedia.org/wiki/Compositing_window_manager):

> A compositing window manager is a window manager that provides applications
> with an off-screen buffer for each window. The window manager composites
> the window buffers into an image representing the screen and writes the
> result into the display memory.

_Embedded compositing_ (or _client compositing_) enables applications to nest
(embed) other applications' surfaces in their own surface.

RAMSES provides an API for embedded compositing. Note that
for embedded compositing to work the platform's system compositor has to be
wayland.

While RAMSES by providing the compositing service is called the _server_,
the other applications embedding their surfaces are called _clients_.

To establish a connection between the server and its client processes
a UNIX domain socket (IPC) is used. The connection is established
by using a socket file. For RAMSES embedded compositor there are two
distinct ways to create and use such a socket.

In the most common way RAMSES creates the socket file. This
can be done by settig the file name in the renderer configuration.
RAMSES will then on startup (if embedded compositing is available)
create the socket file. This file can be used by the client applications.

Letting RAMSES create the socket file brings the dependency that all
the clients can be started after RAMSES has fully inititalized.
To be able to start the client applications simultanously with RAMSES
_systemd_ offers a mechanism of creating the socket file for all
dependent services. In this case systemd provides the socket file.
The connection to the socket file has to be obtained by the
process running RAMSES via the systemd API. systemd API will give
you a file descriptor, which can be passed on to RAMSES renderer API


## Configuration

Configuration might happen via command line or via API.

By default none of these options are set. Thus creation and
usage of display will not be possible.

Configuration of embedded compositor's socket is strict.
You can set either the socket filename (incl. group name)
or the socket file descriptor. These settings are exclusive
to each other. If you provide both (file name and file
descriptor) creation and usage of display
will not be possible.

#### Socket filename

You can set the name of the socket file. The file will be created in the
directory pointed to by `$XDG_RUNTIME_DIR`

Command line

    -wse filename
    or
    --wayland-socket-embedded filename

API in `RendererConfig`

    status_t setWaylandSocketEmbedded(const char* socketname);

#### Socket group ownership.

It's possible to set the groupname for the socket file. If this option is set
the group ownership of the socket file will be transered to this group.

Command line

    -wsegn groupname
    or
    --wayland-socket-embedded-groupname groupname

API in `RendererConfig`

    status_t setWaylandSocketEmbeddedGroup(const char* groupname);

#### Socket file descriptor

Instead of the creating the socket file via RAMSES, you can provide
the systemd generated socket file descriptor.

This works only via API in `RendererConfig`

    status_t setWaylandSocketEmbeddedFD(int socketFileDescriptor);



## Embedded Compositing API

The only type available for RAMSES clients to facilitate embedded compositing is
StreamTexture. The notion behind the StreamTexture is that
- objects of this type can be used the same way and in the same places the
  normal Texture2D is used
- only the platform (pre)defined surface IDs can be used as its source (see type
  streamSource_t)
- if the surface is not available or the platform doesn't support embedded
  compositing the default fallback texture is used.

To create the StreamTexture object one needs to call
Scene::createStreamTexture(const Texture2D& fallbackTexture, streamSource_t
source, const char* name). The `source` is an ID of a surface which will be used
for nested compositing. In case that surface is not available or the platform
doesn't support embedded compositing the default texture (ie. `fallbackTexture`)
will be used.


## Example

The following code show the usage of the embedded compositing API in RAMSES. It
creates a cube which uses StreamTexture as its faces.
@snippet ramses-example-embedded-compositing/src/main.cpp Setup StreamTexture
Each application serving as a source of a cube's face needs to have a surface
with an appropriate surface id (>0)
@snippet ramses-example-embedded-compositing/src/main.cpp streamSource_t Example
*/
